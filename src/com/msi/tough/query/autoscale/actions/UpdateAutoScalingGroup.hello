package com.msi.tough.query.autoscale.actions;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;

import com.amazonaws.services.autoscaling.model.AutoScalingGroup;
import com.amazonaws.services.autoscaling.model.UpdateAutoScalingGroupRequest;
import com.amazonaws.services.autoscaling.model.transform.UpdateAutoScalingGroupRequestUnmarshaller;
import com.generationjava.io.xml.XMLNode;
import com.msi.tough.core.StringHelper;
import com.msi.tough.model.ASGroupBean;
import com.msi.tough.model.AccountBean;
import com.msi.tough.query.AbstractAction;
import com.msi.tough.query.MarshallStruct;
import com.msi.tough.query.QueryFaults;
import com.msi.tough.query.QueryUtil;
import com.msi.tough.query.autoscale.AutoScaleQueryFaults;
import com.msi.tough.utils.ASUtil;
import com.yammer.metrics.core.Meter;

public class UpdateAutoScalingGroup extends AbstractAction<AutoScalingGroup> {

	private static Map<String, Meter> meters = initMeter("AutoScaling",
			"UpdateAutoScalingGroup");

	@Override
	protected void mark(AutoScalingGroup ret, Exception e) {
		markStandard(meters, e);
	}

	@Override
	public String marshall(final MarshallStruct<AutoScalingGroup> input,
			final HttpServletResponse resp) throws Exception {
		final XMLNode xn = new XMLNode("UpdateAutoScalingGroupResponse");
		xn.addAttr("xmlns", "http://autoscaling.amazonaws.com/doc/2010-08-01/");
		final XMLNode xr = QueryUtil
				.addNode(xn, "UpdateAutoScalingGroupResult");

		// add metadata
		final XMLNode meta = QueryUtil.addNode(xn, "ResponseMetaData");
		QueryUtil.addNode(meta, "RequestId", input.getRequestId());
		return xn.toString();
	}

	@Override
	public AutoScalingGroup process0(final Session session,
			final HttpServletRequest req, final HttpServletResponse resp,
			final Map<String, String[]> map) throws Exception {
		final UpdateAutoScalingGroupRequest r = UpdateAutoScalingGroupRequestUnmarshaller
				.getInstance().unmarshall(map);
		final AccountBean ac = getAccountBean();
		final ASGroupBean g = ASUtil.readASGroup(session, ac.getId(),
				r.getAutoScalingGroupName());
		if (g == null) {
			throw AutoScaleQueryFaults.groupDoesNotExist();
		}
		if (r.getDefaultCooldown() != null) {
			g.setCooldown(r.getDefaultCooldown());
		}
		if (r.getLaunchConfigurationName() != null) {
			g.setLaunchConfig(r.getLaunchConfigurationName());
		}
		if (r.getHealthCheckGracePeriod() != null) {
			if (r.getHealthCheckGracePeriod() < 0) {
				throw QueryFaults
						.InvalidParameterValue("HealthCheckGracePeriod cannot be < 0");
			}
			g.setHealthCheckGracePeriod(r.getHealthCheckGracePeriod());
		}
		if (r.getMinSize() != null) {
			if (r.getMinSize() < 0) {
				throw QueryFaults
						.InvalidParameterValue("MinSize cannot be < 0");
			}
			g.setMinSz(r.getMinSize());
		}
		if (r.getMaxSize() != null) {
			if (r.getMaxSize() < 0) {
				throw QueryFaults
						.InvalidParameterValue("MaxSize cannot be < 0");
			}
			if (r.getMaxSize() < g.getMinSz()) {
				throw QueryFaults
						.InvalidParameterValue("MaxSize cannot be < MinSize");
			}
			g.setMaxSz(r.getMaxSize());
		}
		if (r.getDesiredCapacity() != null) {
			g.setCapacity(r.getDesiredCapacity());
		}
		if (g.getCapacity() < g.getMinSz()) {
			g.setCapacity(g.getMinSz());
		}
		if (g.getCapacity() > g.getMaxSz()) {
			g.setCapacity(g.getMaxSz());
		}
		if (r.getAvailabilityZones() != null
				&& r.getAvailabilityZones().size() > 0) {
			g.setAvzones(StringHelper.concat(
					r.getAvailabilityZones().toArray(new String[1]), ","));
		}
		session.save(g);

		return ASUtil.toAutoScalingGroup(g);
	}
}
